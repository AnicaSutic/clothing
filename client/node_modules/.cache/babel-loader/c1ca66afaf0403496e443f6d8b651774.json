{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a.sutic\\\\React\\\\clothing\\\\client\\\\src\\\\App.js\";\nimport React, { useEffect, lazy, Suspense } from \"react\";\nimport \"./App.scss\"; // import HomePage from \"./pages/HomePage\";\n\nimport { Route, Switch, Redirect } from \"react-router-dom\"; // import ShopPage from \"./pages/ShopPage\";\n\nimport Header from \"./components/Header\";\nimport SignInUp from \"./pages/SIgn/SIgnInUp\";\nimport { connect } from \"react-redux\";\nimport { selectCurrentUser } from \"./redux/user/userSelector\";\nimport { createStructuredSelector } from \"reselect\";\nimport CheckoutPage from \"./pages/CheckoutPage\";\nimport { selectShopCollectionForPreview } from \"./redux/shop/shopSelector\";\nimport { checkUserSession } from \"./redux/user/userActions\"; // do that for all components\n\nconst HomePage = lazy(() => import(\"./pages/HomePage\"));\nconst ShopPage = lazy(() => import(\"./pages/ShopPage\"));\n\nfunction App({\n  checkUserSession,\n  currentUser\n}) {\n  // we want just for the first time to run\n  // because if user change we want to render\n  useEffect(() => {\n    checkUserSession();\n  }, [checkUserSession]); // componentDidMount() {\n  //   const {checkUserSession} = this.props;\n  //   checkUserSession();\n  //const { setCurrentUser } = this.props;\n  // this is a metoh in auth library, param is what is user state\n  // this connection is always open and we need to close it in unmount\n  // this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n  //   if (userAuth) {\n  //     const userRef = await createUserProfileDoc(userAuth);\n  //     userRef.onSnapshot(snapshot => {\n  //       // this.setState({\n  //       //   currentUser: {\n  //       //     id: snapshot.id,\n  //       //     ...snapshot.data()\n  //       //   }\n  //       // }, () => {\n  //       //   console.log(this.state);\n  //       // });\n  //       setCurrentUser({\n  //         id: snapshot.id,\n  //         ...snapshot.data()\n  //       });\n  //     });\n  //   }\n  //   setCurrentUser(userAuth);\n  //   // we just wanted programmicaly to add data to dataabse now it is not necessary\n  //   //addCollectionsAndDoc('collections',collectionsArray.map(({title,items}) => ({title,items})));\n  //   // this.setState({\n  //   //   currentUser:user\n  //   // });\n  // });\n  // }\n  // componentWillUnmount() {\n  //   // to close subscription and connection\n  //   this.unsubscribeFromAuth();\n  // }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Suspense, {\n    fallback: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Loading....\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: HomePage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/shop\",\n    component: ShopPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), React.createElement(Route, {\n    exact: true,\n    path: \"/checkout\",\n    component: CheckoutPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/sign\",\n    render: () => currentUser ? React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }) : React.createElement(SignInUp, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })));\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  collectionsArray: selectShopCollectionForPreview\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n}); // saga is handling now\n// function mapDispatchToProps(dispatch) {\n//   return {\n//     setCurrentUser: user => {\n//       dispatch(setCurrentUser(user));\n//     }\n//   };\n// }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Users\\a.sutic\\React\\clothing\\client\\src\\App.js"],"names":["React","useEffect","lazy","Suspense","Route","Switch","Redirect","Header","SignInUp","connect","selectCurrentUser","createStructuredSelector","CheckoutPage","selectShopCollectionForPreview","checkUserSession","HomePage","ShopPage","App","currentUser","mapStateToProps","collectionsArray","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, lazy, Suspense } from \"react\";\nimport \"./App.scss\";\n// import HomePage from \"./pages/HomePage\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n// import ShopPage from \"./pages/ShopPage\";\nimport Header from \"./components/Header\";\nimport SignInUp from \"./pages/SIgn/SIgnInUp\";\n\nimport { connect } from \"react-redux\";\nimport { selectCurrentUser } from \"./redux/user/userSelector\";\nimport { createStructuredSelector } from \"reselect\";\nimport CheckoutPage from \"./pages/CheckoutPage\";\nimport { selectShopCollectionForPreview } from \"./redux/shop/shopSelector\";\nimport { checkUserSession } from \"./redux/user/userActions\";\n\n// do that for all components\nconst HomePage = lazy(() => import(\"./pages/HomePage\"));\nconst ShopPage = lazy(() => import(\"./pages/ShopPage\"));\n\nfunction App({ checkUserSession, currentUser }) {\n  // we want just for the first time to run\n  // because if user change we want to render\n  useEffect(() => {\n    checkUserSession();\n  }, [checkUserSession]);\n\n  // componentDidMount() {\n  //   const {checkUserSession} = this.props;\n  //   checkUserSession();\n  //const { setCurrentUser } = this.props;\n  // this is a metoh in auth library, param is what is user state\n  // this connection is always open and we need to close it in unmount\n  // this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n  //   if (userAuth) {\n  //     const userRef = await createUserProfileDoc(userAuth);\n  //     userRef.onSnapshot(snapshot => {\n  //       // this.setState({\n  //       //   currentUser: {\n  //       //     id: snapshot.id,\n  //       //     ...snapshot.data()\n  //       //   }\n  //       // }, () => {\n  //       //   console.log(this.state);\n  //       // });\n  //       setCurrentUser({\n  //         id: snapshot.id,\n  //         ...snapshot.data()\n  //       });\n  //     });\n  //   }\n\n  //   setCurrentUser(userAuth);\n  //   // we just wanted programmicaly to add data to dataabse now it is not necessary\n  //   //addCollectionsAndDoc('collections',collectionsArray.map(({title,items}) => ({title,items})));\n\n  //   // this.setState({\n  //   //   currentUser:user\n  //   // });\n  // });\n  // }\n\n  // componentWillUnmount() {\n  //   // to close subscription and connection\n  //   this.unsubscribeFromAuth();\n  // }\n\n  return (\n    <div>\n      <Header />\n      <Switch>\n        <Suspense fallback={<div>Loading....</div>}>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={ShopPage} />\n        </Suspense>\n        <Route exact path=\"/checkout\" component={CheckoutPage} />\n        <Route\n          exact\n          path=\"/sign\"\n          render={() => (currentUser ? <Redirect to=\"/\" /> : <SignInUp />)}\n        />\n      </Switch>\n    </div>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  collectionsArray: selectShopCollectionForPreview\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n});\n\n// saga is handling now\n// function mapDispatchToProps(dispatch) {\n//   return {\n//     setCurrentUser: user => {\n//       dispatch(setCurrentUser(user));\n//     }\n//   };\n// }\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n"]},"metadata":{},"sourceType":"module"}