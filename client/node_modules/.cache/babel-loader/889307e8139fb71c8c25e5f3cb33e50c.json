{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\a.sutic\\\\React\\\\clothing\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyDazSwftErgVqt1GG__cUosrEEUaSEdnJE\",\n  authDomain: \"clothing-db-2a12a.firebaseapp.com\",\n  databaseURL: \"https://clothing-db-2a12a.firebaseio.com\",\n  projectId: \"clothing-db-2a12a\",\n  storageBucket: \"\",\n  messagingSenderId: \"117285361868\",\n  appId: \"1:117285361868:web:65c4ee5e137fd33d\"\n};\nexport const createUserProfileDoc = async (userAuth, additionalData) => {\n  if (!userAuth) return; // if there is no user exit\n\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid)); // to know if we stpred user object or not in database\n\n  const spanShot = await userRef.get(); // if not exist create it\n\n  if (!spanShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      // create data for user\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const tranformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items; // add route name in every collection doc, we dont have it in our database so here we add it\n\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      // get id of stored object\n      title,\n      items\n    };\n  });\n  return tranformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; // just to add data to database through program\n// export const addCollectionsAndDoc = async (collectionKey, objectsToAdd) => {\n//   console.log(\"usao\")\n//   const collectionRef = firestore.collection(collectionKey);\n//   const batch = firestore.batch();\n//   objectsToAdd.forEach(obj => {\n//     const newDocRef = collectionRef.doc(); // new doc ref empty\n//     // set value, set obj to out ref\n//     batch.set(newDocRef,obj)\n//   });\n//   // promise, void value\n//   return await batch.commit();\n// }\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider(); //alwaus show prompt dialog when click button\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); // sign in with that provider\n// than enable in firebase app sign in with google\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:\\Users\\a.sutic\\React\\clothing\\src\\firebase\\firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDoc","userAuth","additionalData","userRef","firestore","doc","uid","spanShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","convertCollectionsSnapshotToMap","collections","tranformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","collection","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,mCAFC;AAGbC,EAAAA,WAAW,EAAE,0CAHA;AAIbC,EAAAA,SAAS,EAAE,mBAJE;AAKbC,EAAAA,aAAa,EAAE,EALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE;AAPM,CAAf;AAUA,OAAO,MAAMC,oBAAoB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACtE,MAAI,CAACD,QAAL,EAAe,OADuD,CAC/C;;AACvB,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,iBAAuBJ,QAAQ,CAACK,GAAhC,EAAhB,CAFsE,CAItE;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CALsE,CAOtE;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAAA,UACZC,WADY,GACWT,QADX,CACZS,WADY;AAAA,UACCC,KADD,GACWV,QADX,CACCU,KADD;AAEpB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF;AACA,YAAMV,OAAO,CAACW,GAAR;AACJJ,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA;AAHI,SAIDV,cAJC,EAAN;AAMD,KARD,CAQE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CA1BM;AA4BP,OAAO,MAAMgB,+BAA+B,GAAEC,WAAW,IAAI;AACzD,QAAMC,oBAAoB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAqBlB,GAAG,IAAI;AAAA,sBAChCA,GAAG,CAACmB,IAAJ,EADgC;AAAA,UAChDC,KADgD,aAChDA,KADgD;AAAA,UACzCC,KADyC,aACzCA,KADyC,EAGvD;;;AACA,WAAO;AACLC,MAAAA,SAAS,EAAEC,SAAS,CAACH,KAAK,CAACI,WAAN,EAAD,CADf;AAELC,MAAAA,EAAE,EAAEzB,GAAG,CAACyB,EAFH;AAEO;AACZL,MAAAA,KAHK;AAILC,MAAAA;AAJK,KAAP;AAMD,GAV4B,CAA7B;AAYA,SAAOL,oBAAoB,CAACU,MAArB,CAA4B,CAACC,WAAD,EAAcC,UAAd,KAA6B;AAC9DD,IAAAA,WAAW,CAACC,UAAU,CAACR,KAAX,CAAiBI,WAAjB,EAAD,CAAX,GAA8CI,UAA9C;AACA,WAAOD,WAAP;AACD,GAHM,EAGL,EAHK,CAAP;AAKH,CAlBM,C,CAoBP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEAzC,QAAQ,CAAC2C,aAAT,CAAuB1C,MAAvB;AAEA,OAAO,MAAM2C,IAAI,GAAG5C,QAAQ,CAAC4C,IAAT,EAAb;AACP,OAAO,MAAM/B,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMgC,QAAQ,GAAG,IAAI7C,QAAQ,CAAC4C,IAAT,CAAcE,kBAAlB,EAAjB,C,CACA;;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAEA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AACP,eAAe7C,QAAf","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDazSwftErgVqt1GG__cUosrEEUaSEdnJE\",\r\n  authDomain: \"clothing-db-2a12a.firebaseapp.com\",\r\n  databaseURL: \"https://clothing-db-2a12a.firebaseio.com\",\r\n  projectId: \"clothing-db-2a12a\",\r\n  storageBucket: \"\",\r\n  messagingSenderId: \"117285361868\",\r\n  appId: \"1:117285361868:web:65c4ee5e137fd33d\"\r\n};\r\n\r\nexport const createUserProfileDoc = async (userAuth, additionalData) => {\r\n  if (!userAuth) return; // if there is no user exit\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n  // to know if we stpred user object or not in database\r\n  const spanShot = await userRef.get();\r\n\r\n  // if not exist create it\r\n  if (!spanShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      // create data for user\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap =collections => {\r\n    const tranformedCollection = collections.docs.map(doc => {\r\n      const {title, items} = doc.data();\r\n\r\n      // add route name in every collection doc, we dont have it in our database so here we add it\r\n      return {\r\n        routeName: encodeURI(title.toLowerCase()),\r\n        id: doc.id, // get id of stored object\r\n        title,\r\n        items\r\n      }\r\n    })\r\n\r\n    return tranformedCollection.reduce((accumulator, collection) => {\r\n      accumulator[collection.title.toLowerCase()] = collection;\r\n      return accumulator;\r\n    },{});\r\n\r\n}\r\n\r\n// just to add data to database through program\r\n\r\n// export const addCollectionsAndDoc = async (collectionKey, objectsToAdd) => {\r\n//   console.log(\"usao\")\r\n//   const collectionRef = firestore.collection(collectionKey);\r\n//   const batch = firestore.batch();\r\n//   objectsToAdd.forEach(obj => {\r\n//     const newDocRef = collectionRef.doc(); // new doc ref empty\r\n//     // set value, set obj to out ref\r\n//     batch.set(newDocRef,obj)\r\n//   });\r\n\r\n//   // promise, void value\r\n//   return await batch.commit();\r\n// }\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n//alwaus show prompt dialog when click button\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\n\r\n// sign in with that provider\r\n// than enable in firebase app sign in with google\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}