{"ast":null,"code":"import { takeEvery } from \"redux-saga/effects\";\nimport * as actionTypes from \"../constants/index\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shopActions\";\nexport function* fetchCollectionAsync() {\n  yield console.log(\"I am fired\");\n  const collectionRef = firestore.collection(\"collections\"); // get our collection\n  //   collectionRef\n  //     .get()\n  //     .then(snapshot => {\n  //       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //       dispatch(fetchCollectionsSuccess(collectionsMap));\n  //       this.setState({ loading: false });\n  //     })\n  //     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionStart() {\n  //second par will run after this action\n  // create non blocking code, app can run without pause, when this not finish\n  yield takeEvery(actionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:\\Users\\a.sutic\\React\\clothing\\src\\redux\\shop\\shopSaga.js"],"names":["takeEvery","actionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionAsync","console","log","collectionRef","collection","fetchCollectionStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAO,KAAKC,WAAZ,MAA6B,oBAA7B;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAIA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,eAAjE;AAGA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACA,QAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB,CAFsC,CAEqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACtC;AACA;AACA,QAAMX,SAAS,CAACC,WAAW,CAACW,sBAAb,EAAqCN,oBAArC,CAAf;AACD","sourcesContent":["import { takeEvery } from \"redux-saga/effects\";\r\nimport * as actionTypes from \"../constants/index\";\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap\r\n} from \"../../firebase/firebase.utils\";\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shopActions\";\r\n\r\n\r\nexport function* fetchCollectionAsync() {\r\n  yield console.log(\"I am fired\");\r\n  const collectionRef = firestore.collection(\"collections\"); // get our collection\r\n//   collectionRef\r\n//     .get()\r\n//     .then(snapshot => {\r\n//       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//       dispatch(fetchCollectionsSuccess(collectionsMap));\r\n//       this.setState({ loading: false });\r\n//     })\r\n//     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionStart() {\r\n  //second par will run after this action\r\n  // create non blocking code, app can run without pause, when this not finish\r\n  yield takeEvery(actionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}