{"ast":null,"code":"import { takeEvery, call } from \"redux-saga/effects\";\nimport * as actionTypes from \"../constants/index\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shopActions\";\nexport function* fetchCollectionAsync() {\n  yield console.log(\"I am fired\");\n\n  try {\n    const collectionRef = firestore.collection(\"collections\"); // get our collection\n\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } //   collectionRef\n  //     .get()\n  //     .then(snapshot => {\n  //       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //       dispatch(fetchCollectionsSuccess(collectionsMap));\n  //       this.setState({ loading: false });\n  //     })\n  //     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n}\nexport function* fetchCollectionStart() {\n  //second par will run after this action\n  // create non blocking code, app can run without pause, when this not finish\n  yield takeEvery(actionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:\\Users\\a.sutic\\React\\clothing\\src\\redux\\shop\\shopSaga.js"],"names":["takeEvery","call","actionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","put","error","message","fetchCollectionStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAASA,SAAT,EAAqBC,IAArB,QAAgC,oBAAhC;AACA,OAAO,KAAKC,WAAZ,MAA6B,oBAA7B;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAIA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,eAAjE;AAGA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB,CADE,CACyD;;AAC3D,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACG,+BAAD,EAAiCQ,QAAjC,CAAjC;AACA,UAAMG,GAAG,CAACV,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,UAAMD,GAAG,CAACT,uBAAuB,CAACU,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD,GAVqC,CAYxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACtC;AACA;AACA,QAAMlB,SAAS,CAACE,WAAW,CAACiB,sBAAb,EAAqCZ,oBAArC,CAAf;AACD","sourcesContent":["import { takeEvery , call} from \"redux-saga/effects\";\r\nimport * as actionTypes from \"../constants/index\";\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap\r\n} from \"../../firebase/firebase.utils\";\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shopActions\";\r\n\r\n\r\nexport function* fetchCollectionAsync() {\r\n  yield console.log(\"I am fired\");\r\n\r\n  try {\r\n    const collectionRef = firestore.collection(\"collections\"); // get our collection\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap,snapshot);\r\n    yield put(fetchCollectionsSuccess(collectionsMap))\r\n  } catch (error) {\r\n    yield put(fetchCollectionsFailure(error.message))\r\n  }\r\n  \r\n//   collectionRef\r\n//     .get()\r\n//     .then(snapshot => {\r\n//       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//       dispatch(fetchCollectionsSuccess(collectionsMap));\r\n//       this.setState({ loading: false });\r\n//     })\r\n//     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionStart() {\r\n  //second par will run after this action\r\n  // create non blocking code, app can run without pause, when this not finish\r\n  yield takeEvery(actionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}