{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport rootReducer from './rootReducer';\nimport { persistStore } from 'redux-persist';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './rootSaga'; // replace thunk with saga, for handle async actions\n//const middlewares = [thunk];\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware]; // check what env we serve\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); // spread midd into individial arguments\n\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["C:\\Users\\a.sutic\\React\\clothing\\src\\redux\\store.js"],"names":["createStore","applyMiddleware","logger","rootReducer","persistStore","thunk","createSagaMiddleware","rootSaga","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAIA;AACA;;AAEA,MAAMC,cAAc,GAAGF,oBAAoB,EAA3C;AAEA,MAAMG,WAAW,GAAG,CAACD,cAAD,CAApB,C,CAEA;;AACA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBX,MAAjB;AACH;;AAED,OAAO,MAAMY,KAAK,GAAGd,WAAW,CAACG,WAAD,EAAcF,eAAe,CAAC,GAAGQ,WAAJ,CAA7B,CAAzB,C,CAAyE;;AAEhFD,cAAc,CAACO,GAAf,CAAmBR,QAAnB;AAEA,OAAO,MAAMS,SAAS,GAAGZ,YAAY,CAACU,KAAD,CAA9B","sourcesContent":["import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './rootReducer';\r\nimport {persistStore} from 'redux-persist';\r\nimport thunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './rootSaga';\r\n\r\n\r\n\r\n// replace thunk with saga, for handle async actions\r\n//const middlewares = [thunk];\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\n// check what env we serve\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger)\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); // spread midd into individial arguments\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport const persistor = persistStore(store)\r\n"]},"metadata":{},"sourceType":"module"}