{"ast":null,"code":"import { takeLatest, call, put } from \"redux-saga/effects\";\nimport * as actionTypes from \"../constants/index\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shopActions\";\nexport function* fetchCollectionAsync() {\n  yield console.log(\"I am fired\");\n\n  try {\n    const collectionRef = firestore.collection(\"collections\"); // get our collection\n\n    const snapshot = yield collectionRef.get(); // get back in promise\n    // first arg function or method, secound is param that is sent to function\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); //call is the effect that invoke method,we want to yield this in case call takes longer than expected\n\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionStart() {\n  //second par will run after this action\n  // create non blocking code, app can run without pause, when this not finish\n  yield takeLatest(actionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:\\Users\\a.sutic\\React\\clothing\\client\\src\\redux\\shop\\shopSaga.js"],"names":["takeLatest","call","put","actionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAO,KAAKC,WAAZ,MAA6B,oBAA7B;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAIA,SACEC,uBADF,EAEEC,uBAFF,QAGO,eAHP;AAKA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB,CADE,CACyD;;AAC3D,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFE,CAE0C;AAC5C;;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAC/BI,+BAD+B,EAE/BQ,QAF+B,CAAjC,CAJE,CAOC;;AACH,UAAMX,GAAG,CAACI,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACD,GATD,CASE,OAAOC,KAAP,EAAc;AACd,UAAMd,GAAG,CAACK,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACtC;AACA;AACA,QAAMlB,UAAU,CAACG,WAAW,CAACgB,sBAAb,EAAqCX,oBAArC,CAAhB;AACD","sourcesContent":["import { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport * as actionTypes from \"../constants/index\";\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap\r\n} from \"../../firebase/firebase.utils\";\r\nimport {\r\n  fetchCollectionsSuccess,\r\n  fetchCollectionsFailure\r\n} from \"./shopActions\";\r\n\r\nexport function* fetchCollectionAsync() {\r\n  yield console.log(\"I am fired\");\r\n\r\n  try {\r\n    const collectionRef = firestore.collection(\"collections\"); // get our collection\r\n    const snapshot = yield collectionRef.get(); // get back in promise\r\n    // first arg function or method, secound is param that is sent to function\r\n    const collectionsMap = yield call(\r\n      convertCollectionsSnapshotToMap,\r\n      snapshot\r\n    ); //call is the effect that invoke method,we want to yield this in case call takes longer than expected\r\n    yield put(fetchCollectionsSuccess(collectionsMap));\r\n  } catch (error) {\r\n    yield put(fetchCollectionsFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* fetchCollectionStart() {\r\n  //second par will run after this action\r\n  // create non blocking code, app can run without pause, when this not finish\r\n  yield takeLatest(actionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}