{"version":3,"sources":["components/HOC/withSpinner/withSpinner.styles.jsx","components/HOC/withSpinner/index.jsx","components/CollectionItem/index.jsx","components/CollectionPreview/index.jsx","components/CollectionsOverview/index.jsx","components/CollectionsOverview/index.container.jsx","pages/CollectionPage/index.jsx","pages/CollectionPage/index.container.jsx","pages/ShopPage/index.jsx"],"names":["SpinnerOverlay","styled","div","_templateObject","SpinnerContainer","_templateObject2","WithSpinner","WrappedComponent","_ref","isLoading","otherProps","Object","objectWithoutProperties","react_default","a","createElement","connect","dispatch","addItem","item","name","imageUrl","price","className","style","backgroundImage","concat","CustomButton","onClick","inverted","withRouter","props","title","items","routeName","history","console","log","push","match","url","toUpperCase","filter","idx","map","components_CollectionItem","key","id","mapStateToProps","createStructuredSelector","collections","selectShopCollectionForPreview","_ref2","otherCollProps","components_CollectionPreview","assign","selectCollectionFetching","CollectionsOverviewContainer","compose","CollectionsOverview","state","ownProps","collection","selectCollection","params","collectionId","selectIsCollectionLoaded","CollectionPageContainer","CollectionPage","isCollectionLoaded","fetchCollectionsStart","useEffect","react_router","exact","path","component"],"mappings":"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","file":"static/js/3.aefddb15.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { SpinnerOverlay, SpinnerContainer } from \"./withSpinner.styles\";\r\n\r\n// hoc, func takes some component get passed into new component is true render with spinner if not render just that component\r\nconst WithSpinner = WrappedComponent => {\r\n  const Spinner = ({ isLoading, ...otherProps }) => {\r\n    return isLoading ? (\r\n      <SpinnerOverlay>\r\n        <SpinnerContainer />\r\n      </SpinnerOverlay>\r\n    ) : (\r\n      <WrappedComponent {...otherProps} />\r\n    );\r\n  };\r\n  return Spinner;\r\n};\r\n\r\nexport default WithSpinner;\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport CustomButton from \"../CustomButton\";\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"../../redux/cart/cartActions\";\r\n\r\nfunction CollectionItem({ item, addItem }) {\r\n  const { name, imageUrl, price } = item;\r\n  return (\r\n    <div className=\"collection-item\">\r\n      <div className=\"image\" style={{ backgroundImage: `url(${imageUrl})` }} />\r\n      <div className=\"collection-footer\">\r\n        <span className=\"name\">{name}</span>\r\n        <span className=\"price\">{price}</span>\r\n      </div>\r\n      <CustomButton onClick={() => addItem(item)} inverted>\r\n        ADD TO CART\r\n      </CustomButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addItem: item => {\r\n      dispatch(addItem(item));\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(CollectionItem);\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport CollectionItem from \"../CollectionItem\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nfunction CollectionPreview(props) {\r\n  const { title, items, routeName, history } = props;\r\n  console.log(routeName);\r\n  return (\r\n    <div className=\"collection-preview\">\r\n      <h1\r\n        className=\"title\"\r\n        onClick={() => history.push(`${props.match.url}/${routeName}`)}\r\n      >\r\n        {title.toUpperCase()}\r\n      </h1>\r\n      <div className=\"preview\">\r\n        {items\r\n          .filter((item, idx) => idx < 4)\r\n          .map(item => (\r\n            <CollectionItem key={item.id} item={item} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(CollectionPreview);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport \"./index.scss\";\r\nimport CollectionPreview from \"../CollectionPreview\";\r\nimport { selectShopCollectionForPreview } from \"../../redux/shop/shopSelector\";\r\n\r\nfunction CollectionOverview({ collections }) {\r\n  return (\r\n    <div className=\"collections-overview\">\r\n      {collections.map(({ id, ...otherCollProps }) => (\r\n        <CollectionPreview key={id} {...otherCollProps} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  collections: selectShopCollectionForPreview\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(CollectionOverview);\r\n","import {connect} from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCollectionFetching } from '../../redux/shop/shopSelector';\r\nimport WithSpinner from '../HOC/withSpinner';\r\nimport CollectionsOverview from '.';\r\nimport {compose} from 'redux';\r\n\r\n// name prop like is called in with spinner\r\nconst mapStateToProps = createStructuredSelector({\r\n    isLoading : selectCollectionFetching\r\n})\r\n\r\n// isLoading send to withSpinner hoc\r\nexport const CollectionsOverviewContainer = compose(\r\n    connect(mapStateToProps),\r\n    WithSpinner\r\n)(CollectionsOverview);\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectCollection } from \"../../redux/shop/shopSelector\";\r\nimport CollectionItem from \"../../components/CollectionItem\";\r\n//import { firestore } from \"../../firebase/firebase.utils\";\r\n\r\nconst CollectionPage = ({ collection }) => {\r\n\r\n\r\n  // when collection changes\r\n  // useEffect(() => {\r\n  //   const unsubscribeFromCollections = firestore.collection('collections').onSnapshot(snapshot => console.log(snapshot))\r\n  //   return () => {\r\n  //     unsubscribeFromCollections()\r\n  //   }\r\n  // },[]);\r\n\r\n  const { title, items } = collection;\r\n  return (\r\n    <div className=\"collection-page\">\r\n      <h2 className=\"title\">{title}</h2>\r\n      <div className=\"items\">\r\n        {items.map(item => (\r\n          <CollectionItem key={item.id} item={item} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  collection: selectCollection(ownProps.match.params.collectionId)(state) // to pass url param\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(CollectionPage);\r\n","import {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectIsCollectionLoaded } from '../../redux/shop/shopSelector';\r\nimport WithSpinner from '../../components/HOC/withSpinner';\r\nimport CollectionPage from '.';\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    isLoading: (state) =>  !selectIsCollectionLoaded(state)\r\n})\r\n\r\nconst CollectionPageContainer = compose(\r\n    connect(mapStateToProps),\r\n    WithSpinner\r\n)(CollectionPage);\r\n\r\nexport default CollectionPageContainer;","import React, {  useEffect } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCollectionsStart } from \"../../redux/shop/shopActions\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { selectIsCollectionLoaded } from \"../../redux/shop/shopSelector\";\r\nimport { CollectionsOverviewContainer } from \"../../components/CollectionsOverview/index.container\";\r\nimport CollectionPageContainer from \"../CollectionPage/index.container\";\r\n\r\n\r\nfunction ShopPage({fetchCollectionsStart,match}) {\r\n  // componentDidMount() {\r\n  //   this.props.fetchCollectionsStart()\r\n  // }\r\n    useEffect(() => {\r\n      fetchCollectionsStart()\r\n    },[fetchCollectionsStart]) // instead of empty array\r\n\r\n    return (\r\n      <div className=\"shop-page\">\r\n        <Route\r\n          exact\r\n          path={`${match.path}`}\r\n          //   render={props => (\r\n          //     <CollectionsOverviewWithSpinner\r\n          //       isLoading={isCollectionFetching}\r\n          //       {...props}\r\n          //     />\r\n          //   )}\r\n          component={CollectionsOverviewContainer}\r\n        />\r\n        <Route\r\n          path={`${match.path}/:collectionId`}\r\n          //   render={props => (\r\n          //     <CollectionPageWithSpinner\r\n          //       isLoading={!isCollectionLoaded}\r\n          //       {...props}\r\n          //     />\r\n          //   )}\r\n          component={CollectionPageContainer}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isCollectionLoaded: selectIsCollectionLoaded\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n  //  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\r\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ShopPage);\r\n"],"sourceRoot":""}